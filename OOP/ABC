- Abstract classes are classes that contain one or more abstract methods.
- An abstract method is a method that is declared but contains no implementation.
- Abstract classes cannot be instantiated, and require subclasses to provide implementations for the abstract method
- ABCMeta is a metaclass for defining abstract base class. 

from abc import ABC, abstractmethod
 
class AbstractClassExample(ABC):
 
    def __init__(self, value):
        self.value = value
        super().__init__()
    
    @abstractmethod  #abc.abstractmethod
    def do_something(self):
        pass
        
- a class that is derived from an abstrac class cannot be instantiated unless all of its abstract
  methods are overridden.
- An abstract method can have an implementation in the abstrac class.
  But they must be overridden in subclasses.
  The abstract method can be invoked with super().
